# `sheldon` configuration file
# ----------------------------
#
# You can modify this file directly or you can use one of the following
# `sheldon` commands which are provided to assist in editing the config file:
#
# - `sheldon add` to add a new plugin to the config file
# - `sheldon edit` to open up the config file in the default editor
# - `sheldon remove` to remove a plugin from the config file
#
# See the documentation for more https://github.com/rossmacarthur/sheldon#readme

shell = "zsh"

[plugins]

[templates]
defer = "{{ hooks?.pre | nl }}{% for file in files %}zsh-defer source \"{{ file }}\"\n{% endfor %}{{ hooks?.get | nl }}"
hooks = "{{ hooks?.pre | nl }}{% for file in files %}source \"{{ file }}\"\n{% endfor %}{{ hooks?.get | nl }}"

[plugins.zsh-defer]
github = "romkatv/zsh-defer"

[plugins.starship]
inline = 'eval "$(starship init zsh)"'

[plugins.compinit]
inline = 'autoload -Uz compinit && zsh-defer compinit'

[plugins.zsh-completions]
github = 'zsh-users/zsh-completions'
apply = ["defer"]

[plugins.zsh-autosuggestions]
github = 'zsh-users/zsh-autosuggestions'
apply = ["defer"]

[plugins.fast-syntax-highlighting]
github = "zdharma-continuum/fast-syntax-highlighting"
apply = ["defer"]

[plugins.zoxide]
github = "ajeetdsouza/zoxide"
apply = ["defer"]
hooks.get = """
eval "$(zoxide init zsh --cmd cd)"
_run-cdi() {
    local dir="$(eval "zoxide query -i")"

    if [[ -z "$dir" ]]; then
        zle redisplay
        return 0
    fi

    zle push-line
    BUFFER=" builtin cd -- ${(q)dir}"
    zle accept-line
    local ret=$?
    unset dir
    zle reset-prompt
    return $ret
}

zle -N _run-cdi
bindkey "^G" _run-cdi
"""

[plugins.direnv]
inline = 'zsh-defer eval "$(direnv hook zsh)"'

[plugins.fzf]
inline = '''
zsh-defer eval "$(fzf --zsh)"
zsh-defer bindkey "^K" fzf-cd-widget
'''

[plugins.fzf-tab]
github = 'Aloxaf/fzf-tab'
apply = ["defer"]

[plugins.edit-command-line]
inline = '''
zsh-defer autoload -Uz edit-command-line
zsh-defer zle -N edit-command-line
zsh-defer bindkey "^O" edit-command-line
'''

[plugins.tagged_file_flow]
inline = 'type tagged_file_flow &> /dev/null && zsh-defer eval "$(tagged_file_flow init)"'
