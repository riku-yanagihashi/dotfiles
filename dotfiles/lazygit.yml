git:
  paging:
    colorArg: always
    pager: delta --dark --paging=never
    # pager: delta --dark --paging=never --syntax-theme base16-256 --diff-so-fancy
  parseEmoji: true

gui:
  showCommandLog: false
  showIcons: true
  language: "en"
  mainPanelSplitMode: "horizontal"
  # ref: https://github.com/folke/tokyonight.nvim/blob/main/extras/lazygit/tokyonight_night.yml
  nerdFontsVersion: "3"
  theme:
    activeBorderColor:
      - "#ff9e64"
      - "bold"
    inactiveBorderColor:
      - "#27a1b9"
    searchingActiveBorderColor:
      - "#ff9e64"
      - "bold"
    optionsTextColor:
      - "#7aa2f7"
    selectedLineBgColor:
      - "#283457"
    cherryPickedCommitFgColor:
      - "#7aa2f7"
    cherryPickedCommitBgColor:
      - "#bb9af7"
    markedBaseCommitFgColor:
      - "#7aa2f7"
    markedBaseCommitBgColor:
      - "#e0af68"
    unstagedChangesColor:
      - "#db4b4b"
    defaultFgColor:
      - "#c0caf5"

os:
  editPreset: "nvim"

keybinding:
  universal:
    nextScreenMode: ;
    prevScreenMode: +

customCommands:
  - key: "t"
    context: "files"
    description: "commit files with format"
    prompts:
      - type: "menu"
        title: "What kind of commit type is it?"
        key: "Type"
        options:
          - name: "feat"
            description: "new feature for the user, not a new feature for build script"
            value: "feat"
          - name: "fix"
            description: "bug fix for the user, not a fix to a build script"
            value: "fix"
          - name: "docs"
            description: "changes to the documentation"
            value: "docs"
          - name: "style"
            description: "formatting, missing semi colons, etc; no production code change"
            value: "style"
          - name: "refactor"
            description: "refactoring production code, eg. renaming a variable"
            value: "refactor"
          - name: "test"
            description: "adding missing tests, refactoring tests; no production code change"
            value: "test"
          - name: "chore"
            description: "updating grunt tasks etc; no production code change"
            value: "chore"
          - name: "wip"
            description: "work in progress"
            value: "wip"
      - type: "input"
        title: "(Optional) Enter the scope of {{.Form.Type}}"
        key: "Scope"
        initialValue: ""
      - type: "input"
        title: "Enter the message of {{.Form.Type}}{{if .Form.Scope }} in {{.Form.Scope}}{{end}}"
        key: "Message"
        initialValue: ""
      - type: "confirm"
        title: "Commit"
        body: "Commit with the message '{{.Form.Type}}{{if .Form.Scope }}({{.Form.Scope}}){{end}}: {{.Form.Message}}'. Is this okay?"
    command: 'git commit -m "{{.Form.Type}}{{if .Form.Scope }}({{.Form.Scope}}){{end}}: {{.Form.Message}}"'
    loadingText: "Committing..."
